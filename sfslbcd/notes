
XXX user count is not kept correct, there are ACCESS RPCs w/o CLOSE

XXX close-to-open consistency should be: on any open, fetch latest,
    unless file already open for write. on any close, flush all data
    to server. right now we count users, not writers.

XXX call getreply on all NFS replies, even those in helper functions
XXX write to cached file, remember STABLE flag, update attribute (size+mtime)
XXX on CLOSE, send stuff to server, reflect STABLE flag, but don't
    reset attribute because someone else might have written to the
    server as well
XXX remember COMMIT

consistency
 0) don't update cache if the file is open; once someone opens a file,
    subsequent open requests do not update cache
 1) if lease has not expired, and cache time matches mtime, use cache
 2) if lease has expired, fetch attribute; if cache time matches
    mtime, use cache
 3) if lease has expired, fetch attribute; if cache time does not
    match mtime, update cache

can we depend on nfs client to always send an ACCESS rpc before any
read? we don't do access control upon seeing a READ rpc: we just
return data from the cached file. if an user cannot access a file, the
ACCESS rpc will fail, and therefore no READ rpcs will be sent.

is it bad to evict from lrucache a file with an user count greater
than zero?

